version: 2.1
orbs: 
  slack: circleci/slack@4.10.1
commands:
  destroy_environment:
    description: Destroy backend and frontend cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        default: ${CIRCLE_WORKFLOW_ID:0:7}
        type: string
    steps:
      - run:
          name: Destroy environment 
          when: on_fail
          command: |
            # bucket
            aws s3 rm s3://udapeople-<<parameters.workflow_id>> --recursive

            # backend stack
            aws cloudformation delete-stack --stack-name "udapeople-backend-<<parameters.workflow_id>>"
            
            # front end stack
            aws cloudformation delete-stack --stack-name "udapeople-frontend-<<parameters.workflow_id>>"
  
  revert_migrations:
    description: Revert the last migration
    parameters:
      workflow_id:
        default: ${CIRCLE_WORKFLOW_ID:0:7}
        type: string
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl https://kvdb.io/BUzSmxpEEdGXfmNSEq6Jbm/migration_<<parameters.workflow_id>>)
            if (( $SUCCESS == false ));
            then
                cd ~/project/backend
                npm install
                npm run migrations:revert
            fi            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
            
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
           
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout   
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run front end Test
          command: |      
              cd frontend
              npm install
              npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout   
      - restore_cache:
          keys: [backend-build] 
      - run:
          name: Run back end Test
          command: |      
              cd backend
              npm install
              npm run test
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout   
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run front end analayze
          command: |      
              cd frontend
              npm install
              npm audit fix --audit-level=critical --force
              npm audit fix --force
              npm audit --audit-level=critical


  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout   
      - restore_cache:
          keys: [backend-build] 
      - run:
          name: Run back end analayze
          command: |      
              cd backend
              npm install
              npm audit fix --audit-level=critical --force
              npm audit fix --force
              npm audit --audit-level=critical 
      - slack/notify:
          event: fail
          mentions: '@DevloperTeam'
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1  
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Create file to hold old workflowid
          command: |
            aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text > ~/old_workflow_id.txt
            echo The OldWorkflowID is "$(cat ~/old_workflow_id.txt)"
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
              
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
            
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            touch ~/inventory.txt
            echo [web] > ~/inventory.txt
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> ~/inventory.txt
            cat ~/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - inventory.txt
            - old_workflow_id.txt

      - destroy_environment
  configure-infrastructure:
    docker:
      - image: python:3.10-alpine3.16
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["06:44:f7:22:38:1f:a0:75:71:8d:7a:5f:6c:0e:b2:64"] 
      - attach_workspace:
          at: ~/    
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible 
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i ~/inventory.txt configure-server.yml
  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout 
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to kvdb
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
                curl https://kvdb.io/Co6RwFX8QsVpTH8FSb9627/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi 

  deploy-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - run: sudo apt update -y
      - run: sudo apt upgrade -y
      - run:
          name: install awscli
          command: sudo apt install awscli -y
      - attach_workspace:
          at: ~/
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy_environment
      - revert_migrations
 
  deploy-backend:
    docker:
      - image: python:3.10-alpine3.16
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["06:44:f7:22:38:1f:a0:75:71:8d:7a:5f:6c:0e:b2:64"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache tar gzip nodejs npm aws-cli curl ansible
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            mkdir -p ~/project/.circleci/ansible/roles/deploy/files/
            mv artifact.tar.gz .circleci/ansible/roles/deploy/files/artifact.tar.gz
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat ~/inventory.txt
            ansible-playbook -i ~/inventory.txt deploy-backend.yml
      - destroy_environment
      - revert_migrations   

  smoke-test:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - run: sudo apt update -y
      - run: sudo apt upgrade -y
      - run:
          name: Install dependencies
          command: sudo apt install awscli -y 
      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
                exit 0
            else
                exit 1
            fi      
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              exit 0
            else
              exit 1
            fi
      - destroy_environment
      - revert_migrations          
      

  cloudfront-update:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - run: sudo apt update -y
      - run: sudo apt upgrade -y
      - run:
          name: install awscli
          command: sudo apt install awscli -y
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name InitialStack \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      - destroy_environment
      - revert_migrations 
  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - attach_workspace:
          at: ~/
      - run:
          name: Remove old stacks and files
          command: |
            export OldWorkflowID=$(cat ~/old_workflow_id.txt)
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
                   
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo Stack names: "${STACKS[@]}"  
            if [[ "${CIRCLE_WORKFLOW_ID:0:7}" != "$OldWorkflowID" ]]
            then
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            else
              echo "This features release is the latest and will not be deleted"
            fi           
                
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]  
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              # only: [master]
              only: [circleci-project-setup] 
      - configure-infrastructure:
          requires: [deploy-infrastructure] 
      - run-migrations:
          requires: [configure-infrastructure] 
      - deploy-frontend:
          requires: [run-migrations] 
      - deploy-backend:
          requires: [run-migrations]  
      - smoke-test:
          requires: [deploy-backend, deploy-frontend] 
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]               
      


      
           